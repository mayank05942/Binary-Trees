Prob: https://leetcode.com/problems/maximum-width-of-binary-tree/
________________________________________________________________________________________________________________________________________________

Explanation:

The main idea with this question is we will give each node a position value -> 0 to the root node

If we go down the left neighbor, then position -> position * 2; 

and if we go down the right neighbor, then position -> position * 2 + 1.

This makes it so that when we look at the position values L and R of two 
nodes with the same depth, the width will be R - L + 1.

_________________________________________________________________________________________________________________________________________________________
Code: BFS

class Solution:
    def widthOfBinaryTree(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        queue = [(root,0)]  # assigning labels to each node
        res = 0
        
        while queue:
            
            res = max(res,queue[-1][1] - queue[0][1] + 1)
            temp = []
            for items in queue:
                if items[0].left:
                    temp.append([items[0].left,2*items[1]])
                if items[0].right:
                    temp.append([items[0].right,2*items[1]+1])
            queue = temp
        return res
        
        
