Same Tree: https://leetcode.com/problems/same-tree/
______________________________________________________

Explanation and Code:
***********************

Checking each node one by one if any node is different then return False else recurse

Code:
_____

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        
        if p and q:
            return (p.val == q.val) and self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)
        
        if not p and not q:  # these are the base conditions
            return True
        
        if not p or not q:
            return False
            
####################################################################################################################################

Symmertic Tree: https://leetcode.com/problems/symmetric-tree/
________________

Code: Again similar approach as above

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        
        def check(node1,node2):
        
             # base cases
             
            if node1 is None and node2 is None:
                return True
            if node1 is None or node2 is None:
                return False
            
            return node1.val == node2.val and check(node1.right,node2.left) and check(node1.left,node2.right)
        return check(root,root)
        
_____________________________________________________________________________________________________________________________________________

# BFS sol:

class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return True
            
        # since root is symmertic by itself we need to check left and right
        
        queue = [(root.left,root.right)]
        res =[]
        while queue:
            # pop 2 from queue
            left,right = queue.pop(0)
            
            """ If both left or right is None then also tree is symmetic"""
            
            if left is None and right is None:
                continue
                
            """ If left is None but right is not None or right is not None or left is None in both cases tree will not be symmertic """
            
            if (left is None or right is None) or (left.val != right.val):
                return False
            queue.append((left.left,right.right))
            queue.append((left.right,right.left))

        return True
        
