Prob: https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
__________________________________________________________________________________________________________________________________

Explanation:

There are two ways for this prob: 

1- One in which we pop the last item of postorder this destroy the postorder array
Note: In this case right child must be constructed first

2- Non poping method here we have to slice the postorder array too.
__________________________________________________________________________________________________________________________________

Code:

Method1: poping the last element
###################################

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        if not inorder or not postorder:
            return None
        
        node = TreeNode(postorder.pop())
        
        node_idx = inorder.index(node.val)
        
        inorder_left = inorder[:node_idx]
        inorder_right = inorder[node_idx+1:]
        
        node.right = self.buildTree(inorder_right,postorder)
        node.left = self.buildTree(inorder_left,postorder)
        
        
        return node
 
 Method 2: Non Poping:
 #####################
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
        if len(inorder) == 0:
            return None
        if len(inorder) == 1:
            return TreeNode(inorder[0])
        
        node = TreeNode(postorder[-1])
        
        node_idx = inorder.index(node.val)
        
        inorder_left = inorder[:node_idx]
        inorder_right = inorder[node_idx+1:]
        postorder_left = postorder[:node_idx]
        postorder_right = postorder[node_idx:-1]
        
        node.left = self.buildTree(inorder_left,postorder_left)
        node.right = self.buildTree(inorder_right,postorder_right)
        
        return node
                
                
